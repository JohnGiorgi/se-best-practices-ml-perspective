{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"About this Resource This repository is meant to serve as an opinionated, pedagogical guide on software engineering best practices for those of us in machine learning. What is this guide NOT? It is NOT a comprehensive overview of best practices in software engineering. It is a highly opinionated sampling of tools and ideas that are important for writing good code in a machine learning project. This includes linting, formatting and testing. Who is this guide for? Machine learners who are not currently following software engineering best practices in their projects but would like to. What is machine learning specific about this guide? In truth, nothing important. We use python as the language of choice as it is popular in machine learning, and we write some machine learning specific tests. Otherwise, this guide could apply to (almost) any python project. What tools will this guide cover? Poetry , for managing virtual enviornments and package dependencies. flake8 , for linting. black , for formatting. pytest , for testing. GitHub Actions , for continous integration / continous development (CI/CD).","title":"About this Resource"},{"location":"#about-this-resource","text":"This repository is meant to serve as an opinionated, pedagogical guide on software engineering best practices for those of us in machine learning. What is this guide NOT? It is NOT a comprehensive overview of best practices in software engineering. It is a highly opinionated sampling of tools and ideas that are important for writing good code in a machine learning project. This includes linting, formatting and testing. Who is this guide for? Machine learners who are not currently following software engineering best practices in their projects but would like to. What is machine learning specific about this guide? In truth, nothing important. We use python as the language of choice as it is popular in machine learning, and we write some machine learning specific tests. Otherwise, this guide could apply to (almost) any python project. What tools will this guide cover? Poetry , for managing virtual enviornments and package dependencies. flake8 , for linting. black , for formatting. pytest , for testing. GitHub Actions , for continous integration / continous development (CI/CD).","title":"About this Resource"},{"location":"getting_started/","text":"To get started, make sure you have Python 3.6.1 or newer installed.","title":"Getting started"},{"location":"linting_and_formatting/","text":"Linting A linter is a tool that can automatically identify syntax and stylistic errors in your code. A very popular linter for python is flake8 and will be our tool of choice in this guide. First, make sure we are in our project directory (named \"se-best-practices-ml-perspective\" ) by default. Then, lets add flake8 as a development dependency. poetry add --dev flake8 --dev just means we want this to be a development dependency , that is, a dependency we need to develop our code, but not required by an end user who simply wants to run our code. Lets check our pyproject.toml . [tool.poetry] name = \"se-best-practices-ml-perspective\" version = \"0.1.0\" description = \"\" authors = [\"johngiorgi <johnmgiorgi@gmail.com>\"] [tool.poetry.dependencies] python = \"^3.7\" pytorch-lightning = \"^0.9.0\" torchvision = \"^0.7.0\" [tool.poetry.dev-dependencies] pytest = \"^5.2\" flake8 = \"^3.8.3\" [build-system] requires = [\"poetry>=0.12\"] build-backend = \"poetry.masonry.api\" As expected, flake8 has been added as a development dependency. Now, lets setup a simple example with pytorch-lightning . We will borrow their minimal example . Download it from this repository. curl Then, lets lint the file, checking it for errors. poetry run flake8 . flake8 reports several sytlistic errors ./se_best_practices_ml_perspective/main.py:28:1: W293 blank line contains whitespace ./se_best_practices_ml_perspective/main.py:40:1: E305 expected 2 blank lines after class or function definition, found 1 ./se_best_practices_ml_perspective/main.py:46:59: W292 no newline at end of file Of course, we could fix each error manually, but in the next section, we will see how a code formatter can automatically fix them for us! Now, lets create a python file, main.py under our packages root folder ( \"se-best-practices-ml-perspective/se-best-practices-ml-perspective\" by default) touch se_best_practices_ml_perspective/main.py Then, lets add a simple sklearn classifier to main.py if __name__ == \"__main__\" : main ()","title":"Linting and formatting"},{"location":"linting_and_formatting/#linting","text":"A linter is a tool that can automatically identify syntax and stylistic errors in your code. A very popular linter for python is flake8 and will be our tool of choice in this guide. First, make sure we are in our project directory (named \"se-best-practices-ml-perspective\" ) by default. Then, lets add flake8 as a development dependency. poetry add --dev flake8 --dev just means we want this to be a development dependency , that is, a dependency we need to develop our code, but not required by an end user who simply wants to run our code. Lets check our pyproject.toml . [tool.poetry] name = \"se-best-practices-ml-perspective\" version = \"0.1.0\" description = \"\" authors = [\"johngiorgi <johnmgiorgi@gmail.com>\"] [tool.poetry.dependencies] python = \"^3.7\" pytorch-lightning = \"^0.9.0\" torchvision = \"^0.7.0\" [tool.poetry.dev-dependencies] pytest = \"^5.2\" flake8 = \"^3.8.3\" [build-system] requires = [\"poetry>=0.12\"] build-backend = \"poetry.masonry.api\" As expected, flake8 has been added as a development dependency. Now, lets setup a simple example with pytorch-lightning . We will borrow their minimal example . Download it from this repository. curl Then, lets lint the file, checking it for errors. poetry run flake8 . flake8 reports several sytlistic errors ./se_best_practices_ml_perspective/main.py:28:1: W293 blank line contains whitespace ./se_best_practices_ml_perspective/main.py:40:1: E305 expected 2 blank lines after class or function definition, found 1 ./se_best_practices_ml_perspective/main.py:46:59: W292 no newline at end of file Of course, we could fix each error manually, but in the next section, we will see how a code formatter can automatically fix them for us! Now, lets create a python file, main.py under our packages root folder ( \"se-best-practices-ml-perspective/se-best-practices-ml-perspective\" by default) touch se_best_practices_ml_perspective/main.py Then, lets add a simple sklearn classifier to main.py if __name__ == \"__main__\" : main ()","title":"Linting"},{"location":"managing_depedencies/","text":"Managing depedencies is important for any software project. In machine learning environments, it is particulary important if you care about reproducible results (and you should!). In Python, the canonical approach is to create isolated virtual enviroments for each of our projects. These virtual enviroments store the specific dependencies needed for a given project, without interferring with the dependencies of other projects Note See here for a great introduction on virtual environments. In this guide, we are going to use Poetry, both for creating virtual enviorments and for managing dependencies. Installing Poetry To install poetry, run one of the following commands, depending on your system. osx / linux / bash on windows curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python windows powershell ( Invoke-WebRequest -Uri https : // raw . githubusercontent . com / python-poetry / poetry / master / get-poetry . py -UseBasicParsing ). Content | python Creating a Python Package with Poetry With Poetry installed, we can create our first project like so poetry new se-best-practices-ml-perspective Note The reminder of the guide will assume you have called it se-best-practices-ml-perspective , but you can name it whatever you want. Notice that poetry has automatically created a project directory for us. This includes a README , a main package directory se-best-practices-ml-perspective , and a tests directory (we will return to this later). se-best-practices-ml-perspective \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.rst \u251c\u2500\u2500 se-best-practices-ml-perspective \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_poetry_demo.py Most importantly, pyproject.toml is the configuration file (automatically generated by Poetry) that will contain metadata about our package (like its name, version, and a description) along with our depedencies. Besides the authors line highlited in yellow, your pyproject.toml should look like the following. [tool.poetry] name = \"se-best-practices-ml-perspective\" version = \"0.1.0\" description = \"\" authors = [\"johngiorgi <johnmgiorgi@gmail.com>\"] [tool.poetry.dependencies] python = \"^3.7\" [tool.poetry.dev-dependencies] pytest = \"^5.2\" [build-system] requires = [\"poetry>=0.12\"] build-backend = \"poetry.masonry.api\" Adding Dependencies with Poetry Adding dependencies is easy. Simply call poetry add <package_name> . For example, we will need pytorch-lightning and torchvision in this guide. poetry add pytorch-lightning torchvision Poetry will automatically create a virtual environment if one does not exist, and add pytorch-lightning and torchvision as dependencies to pyproject.toml . [tool.poetry] name = \"se-best-practices-ml-perspective\" version = \"0.1.0\" description = \"\" authors = [\"johngiorgi <johnmgiorgi@gmail.com>\"] [tool.poetry.dependencies] python = \"^3.7\" pytorch-lightning = \"^0.9.0\" torchvision = \"^0.7.0\" [tool.poetry.dev-dependencies] pytest = \"^5.2\" [build-system] requires = [\"poetry>=0.12\"] Thats it for now. In the next section, we will go over linting and formatting.","title":"Managing depedencies"},{"location":"managing_depedencies/#installing-poetry","text":"To install poetry, run one of the following commands, depending on your system. osx / linux / bash on windows curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python windows powershell ( Invoke-WebRequest -Uri https : // raw . githubusercontent . com / python-poetry / poetry / master / get-poetry . py -UseBasicParsing ). Content | python","title":"Installing Poetry"},{"location":"managing_depedencies/#creating-a-python-package-with-poetry","text":"With Poetry installed, we can create our first project like so poetry new se-best-practices-ml-perspective Note The reminder of the guide will assume you have called it se-best-practices-ml-perspective , but you can name it whatever you want. Notice that poetry has automatically created a project directory for us. This includes a README , a main package directory se-best-practices-ml-perspective , and a tests directory (we will return to this later). se-best-practices-ml-perspective \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.rst \u251c\u2500\u2500 se-best-practices-ml-perspective \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tests \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 test_poetry_demo.py Most importantly, pyproject.toml is the configuration file (automatically generated by Poetry) that will contain metadata about our package (like its name, version, and a description) along with our depedencies. Besides the authors line highlited in yellow, your pyproject.toml should look like the following. [tool.poetry] name = \"se-best-practices-ml-perspective\" version = \"0.1.0\" description = \"\" authors = [\"johngiorgi <johnmgiorgi@gmail.com>\"] [tool.poetry.dependencies] python = \"^3.7\" [tool.poetry.dev-dependencies] pytest = \"^5.2\" [build-system] requires = [\"poetry>=0.12\"] build-backend = \"poetry.masonry.api\"","title":"Creating a Python Package with Poetry"},{"location":"managing_depedencies/#adding-dependencies-with-poetry","text":"Adding dependencies is easy. Simply call poetry add <package_name> . For example, we will need pytorch-lightning and torchvision in this guide. poetry add pytorch-lightning torchvision Poetry will automatically create a virtual environment if one does not exist, and add pytorch-lightning and torchvision as dependencies to pyproject.toml . [tool.poetry] name = \"se-best-practices-ml-perspective\" version = \"0.1.0\" description = \"\" authors = [\"johngiorgi <johnmgiorgi@gmail.com>\"] [tool.poetry.dependencies] python = \"^3.7\" pytorch-lightning = \"^0.9.0\" torchvision = \"^0.7.0\" [tool.poetry.dev-dependencies] pytest = \"^5.2\" [build-system] requires = [\"poetry>=0.12\"] Thats it for now. In the next section, we will go over linting and formatting.","title":"Adding Dependencies with Poetry"}]}